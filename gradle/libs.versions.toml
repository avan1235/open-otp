[versions]
accompanist = "0.32.0"
# @keep
android-compileSdk = "34"
# @pin
android-gradle-plugin = "8.1.0"
# @keep
android-minSdk = "26"
# @keep
android-targetSdk = "34"
androidx-activity-compose = "1.8.0-rc01"
androidx-appcompat-appcompat = "1.6.1"
androidx-biometric = "1.2.0-alpha05"
androidx-core-ktx = "1.12.0"
# @pin
androidx-crypto = "1.1.0-alpha05"
barcodeScanning = "17.2.0"
buffer = "1.3.6"
cameraX = "1.3.0"
compose = "1.5.3"
decompose = "2.2.0-compose-experimental-alpha01"
encoding-base32 = "2.0.0"
essenty = "1.3.0-alpha01"
gradle-versions = "0.49.0"
kermit = "2.0.0-RC5"
koin = "3.5.0"
koin-compose = "1.1.0"
# @pin
kotlin = "1.9.10"
kotlincrypto-macs = "0.3.0"
kotlinx-coroutines = "1.7.3"
kotlinx-datetime = "0.4.1"
kotlinx-serialization = "1.6.0"
moko-resources = "0.23.0"
multiplatform-settings = "1.1.0"
parcelize-darwin = "0.2.2"
uri-kmp = "0.0.15"
uuid = "0.8.1"
version-catalog-update = "0.8.1"
# @keep
versionCode = "16"
webcamCapture = "0.3.12"
webcamCaptureDriverNative = "1.0.0"
zxing-core = "3.5.2"

[libraries]
accompanist-permissions = { module = "com.google.accompanist:accompanist-permissions", version.ref = "accompanist" }
accompanist-systemuicontroller = { module = "com.google.accompanist:accompanist-systemuicontroller", version.ref = "accompanist" }
androidx-activity-compose = { module = "androidx.activity:activity-compose", version.ref = "androidx-activity-compose" }
androidx-appcompat-appcompat = { module = "androidx.appcompat:appcompat", version.ref = "androidx-appcompat-appcompat" }
androidx-biometric = { module = "androidx.biometric:biometric", version.ref = "androidx-biometric" }
androidx-camera = { module = "androidx.camera:camera-camera2", version.ref = "cameraX" }
androidx-cameraLifecycle = { module = "androidx.camera:camera-lifecycle", version.ref = "cameraX" }
androidx-cameraPreview = { module = "androidx.camera:camera-view", version.ref = "cameraX" }
androidx-core-ktx = { module = "androidx.core:core-ktx", version.ref = "androidx-core-ktx" }
androidx-security-crypto = { module = "androidx.security:security-crypto", version.ref = "androidx-crypto" }
buffer = { module = "com.ditchoom:buffer", version.ref = "buffer" }
decompose = { module = "com.arkivanov.decompose:decompose", version.ref = "decompose" }
decompose-extensionsComposeJetbrains = { module = "com.arkivanov.decompose:extensions-compose-jetbrains", version.ref = "decompose" }
encoding-base32 = { module = "io.matthewnelson.encoding:base32", version.ref = "encoding-base32" }
essenty-instanceKeeper = { module = "com.arkivanov.essenty:instance-keeper", version.ref = "essenty" }
essenty-lifecycle = { module = "com.arkivanov.essenty:lifecycle", version.ref = "essenty" }
essenty-parcelable = { module = "com.arkivanov.essenty:parcelable", version.ref = "essenty" }
essenty-stateKeeper = { module = "com.arkivanov.essenty:state-keeper", version.ref = "essenty" }
kermit = { module = "co.touchlab:kermit", version.ref = "kermit" }
koin-compose = { module = "io.insert-koin:koin-compose", version.ref = "koin-compose" }
koin-core = { module = "io.insert-koin:koin-core", version.ref = "koin" }
kotlincrypto-macs-hmac-sha1 = { module = "org.kotlincrypto.macs:hmac-sha1", version.ref = "kotlincrypto-macs" }
kotlincrypto-macs-hmac-sha2 = { module = "org.kotlincrypto.macs:hmac-sha2", version.ref = "kotlincrypto-macs" }
kotlinx-coroutines-android = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-android", version.ref = "kotlinx-coroutines" }
kotlinx-coroutines-swing = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-swing", version.ref = "kotlinx-coroutines" }
kotlinx-datetime = { module = "org.jetbrains.kotlinx:kotlinx-datetime", version.ref = "kotlinx-datetime" }
kotlinx-serialization-json = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "kotlinx-serialization" }
mlkit-barcodeScanning = { module = "com.google.mlkit:barcode-scanning", version.ref = "barcodeScanning" }
moko-resoures = { module = "dev.icerock.moko:resources", version.ref = "moko-resources" }
moko-resoures-compose = { module = "dev.icerock.moko:resources-compose", version.ref = "moko-resources" }
multiplatform-settings = { module = "com.russhwolf:multiplatform-settings", version.ref = "multiplatform-settings" }
multiplatform-settings-coroutines = { module = "com.russhwolf:multiplatform-settings-coroutines", version.ref = "multiplatform-settings" }
parcelize-darwinRuntime = { module = "com.arkivanov.parcelize.darwin:runtime", version.ref = "parcelize-darwin" }
uriKmp = { module = "com.eygraber:uri-kmp", version.ref = "uri-kmp" }
uuid = { module = "com.benasher44:uuid", version.ref = "uuid" }
webcam-capture = { module = "com.github.sarxos:webcam-capture", version.ref = "webcamCapture" }
webcam-capture-driver-native = { module = "io.github.eduramiba:webcam-capture-driver-native", version.ref = "webcamCaptureDriverNative" }
zxing-core = { module = "com.google.zxing:core", version.ref = "zxing-core" }
zxing-javase = { module = "com.google.zxing:javase", version.ref = "zxing-core" }

[plugins]
android-application = { id = "com.android.application", version.ref = "android-gradle-plugin" }
android-library = { id = "com.android.library", version.ref = "android-gradle-plugin" }
compose-multiplatform = { id = "org.jetbrains.compose", version.ref = "compose" }
gradle-versions = { id = "com.github.ben-manes.versions", version.ref = "gradle-versions" }
kotlin-multiplatform = { id = "org.jetbrains.kotlin.multiplatform", version.ref = "kotlin" }
kotlin-parcelize = { id = "org.jetbrains.kotlin.plugin.parcelize", version.ref = "kotlin" }
kotlin-serialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }
moko-resources = { id = "dev.icerock.mobile.multiplatform-resources", version.ref = "moko-resources" }
parcelize-darwin = { id = "com.arkivanov.parcelize.darwin", version.ref = "parcelize-darwin" }
version-catalog-update = { id = "nl.littlerobots.version-catalog-update", version.ref = "version-catalog-update" }
